@startuml
'https://plantuml.com/use-case-diagram

abstract class individuo{
    - posicionX: int
    - posicionY: int
    - id: int
    - generacion: int
    - TiempoDeVidaProperty: IntegerProperty
    - probReproduccion: int
    - probClonacion: int
    - probMuerte: int
    --
    + individuo(I:int, G:int, T:int,PR:float,PC:float)
    + individuo(id:int, posicionX:int, posicionY:int, generacion:int, tiempoDeVida:int,probReproduccion:float,probClonacion:float)
    + individuo(individuo:individuo)
    + getPosicionX(): int
    + setPosicionX(posicion: int):
    + getPosicionY(): int
    + setPosicionY(posicion: int)
    + getPosicion():int[]
    + setPosicion(posicion: int[])
    + getId():int
    + setId(Id: int)
    + getGeneracion():int
    + setGeneracion(generacion:int)
    + getTiempoDeVida(): IntegerProperty
    + setTiempoDeVida(tiempoDeVida:int)
    + getProbReproduccion(): float
    + setProbReproduccion(probReproduccion: float)
    + getProbClonacion(): float
    + setProbClonacion(probClonacion: float)
    + getProbMuerte(): float
    + {abstract} getTipo(): abstract Class<T>
    + getGradoTipo(): int
    + reproducirse(pareja:individuo,model:configuracionDataModel,casillaActual:casillaTablero)
    - getProbMejora(individuoSuperior:individuo, model:configuracionDataModel)
    + clonarse(model:configuracionDataModel,casillaActual: casillaTablero)
    + añadir(model:configuracionDataModel,casillaActual:casillaTablero)
    + morir(model:configuracionDataModel, casillaActual:casillaTablero)
    + actualizarTV(model:configuracionDataModel,tablero:tablero)
    + {abstract} mover(model: configuracionDataModel, tablero: tablero)
    # moverAleatorio(tablero: tablero)
    # cambiarPosicion(nuevaPosicionX: int,nuevaPosicionY: int,(tablero: tablero)
}
class individuoBasico extends individuo{
    --
    + individuoBasico(I:int,G:int, T:int, PR:float, PC:float)
    + individuoBasico(I:int, PX:int, PY:int, G:int, TV:int, PR:float, PC:float)
    + individuoBasico(individuo:individuo)
    + getTipo():Class<individuoBasico>
    + mover(model:configuracionDataModel, (tablero: tablero))
    }
class individuoNormal extends individuo{
    --
    + individuoNormal(I:int,G:int, T:int, PR:float, PC:float)
    + individuoNormal(I:int, PX:int, PY:int, G:int, TV:int, PR:float, PC:float)
    + individuoNormal(individuo:individuo)
    + getTipo():Class<individuoNormal>
    + mover(model:configuracionDataModel, (tablero: tablero))
    }
class individuoAvanzado extends individuo{
    --
    + individuoAvanzado(I:int,G:int, T:int, PR:float, PC:float)
    + individuoAvanzado(I:int, PX:int, PY:int, G:int, TV:int, PR:float, PC:float)
    + individuoAvanzado(individuo:individuo)
    + getTipo():Class<individuoNormal>
    + mover(model:configuracionDataModel, (tablero: tablero))
    }
abstract class recurso{
    - id:int
    - posicionX: int
    - posicionY: int
    - tiempoDeAparicion: IntegerProperty
    --
    + recurso()
    + recurso(id:int, T:int)
    + recurso(id:int, posicionX: int, posicionY:int, tiempoDeAparicion:int)
    + getPosicionX(): int
    + setPosicionX(posicionX:int)
    + getPosicionY(): int
    + setPosicionY(posicionY: int)
    + getPosicion(): int[]
    + setPosicion(posicion: int[])
    + getTiempoDeAparicion(): int
    + setTiempoDeAparcicion(tiempo int)
    + {abstract} getTipo(): Class<T>
    + añadir(model:configuracionDataModel, casillaActual:casillaTablero)
    + eliminar(model:configuracionDataModel, casillaActual:casillaTablero)
    + actualizarTA(model:configuracionDataModel, casillaActual:casillaTablero)
    + {abstract} aplicarMejora(individuo:individuo, casillaActual:casillaTablero)
    + getId(): int
    + setId(id: int)
    }
class agua extends recurso{
    - incrementoTV: int
    --
    + agua()
    + agua(id:int,T:int)
    + agua(id:int,PX:int,PY:int,T:int)
    + getIncrementoTV():int
    + setIncrementoTV(incrementoTV:int)
    + aplicarMejora(individuo:individuo, casillaTablero:casillaActual)
    + getTipo(): Class<agua>
    }
class comida extends recurso{
    - incrementoTV: int
    --
    + comida()
    + comida(id:int,T:int)
    + comida(id:int,PX:int,PY:int,T:int)
    + getIncrementoTV():int
    + setIncrementoTV(incrementoTV:int)
    + aplicarMejora(individuo:individuo, casillaTablero:casillaActual)
    + getTipo(): Class<comida>
    }
class montaña extends recurso{
    - incrementoTV: int
    --
    + montaña()
    + montaña(id:int,T:int)
    + montaña(id:int,PX:int,PY:int,T:int)
    + getIncrementoTV():int
    + setIncrementoTV(incrementoTV:int)
    + aplicarMejora(individuo:individuo, casillaTablero:casillaActual)
    + getTipo(): Class<montaña>
    }
class pozo extends recurso{
    --
    + pozo()
    + pozo(id:int,T:int)
    + pozo(id:int,PX:int,PY:int,T:int)
    + aplicarMejora(individuo:individuo, casillaTablero:casillaActual)
    + getTipo(): Class<pozo>
    }
class biblioteca extends recurso{
    - incrementoProbClonacion: float
    --
    + biblioteca()
    + biblioteca(id:int,T:int)
    + biblioteca(id:int,PX:int,PY:int,T:int)
    + getIncrementoProbClonacion():float
    + setIncrementoProbClonacion(incrementoProbClonacion:float)
    + aplicarMejora(individuo:individuo, casillaTablero:casillaActual)
    + getTipo(): Class<biblioteca>
    }
class tesoro extends recurso{
    - incremento: int
    --
    + tesoro()
    + tesoro(id:int,T:int)
    + tesoro(id:int,PX:int,PY:int,T:int)
    + getIncrementoProbReproduccion():int
    + setIncrementoProbReprocuccion(incrementoProbReproduccion:int)
    + aplicarMejora(individuo:individuo, casillaTablero:casillaActual)
    + getTipo(): Class<tesoro>
    }
@enduml